/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
#include <string>
/* Header for class com_zxzx74147_mediacore_components_audio_mixer_AudioNdkInterface */

#ifndef _Included_com_zxzx74147_mediacore_components_audio_mixer_AudioNdkInterface
#define _Included_com_zxzx74147_mediacore_components_audio_mixer_AudioNdkInterface

#include "pcmprocess.h"

#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     com_zxzx74147_mediacore_components_audio_mixer_AudioNdkInterface
 * Method:    pcm_convert
 * Signature: ([BIIIBI)I
 */
JNIEXPORT jint JNICALL Java_com_zxzx74147_mediacore_components_audio_mixer_AudioNdkInterface_pcm_1convert
        (JNIEnv *, jclass, jbyteArray, jint, jint, jint, jbyteArray, jint);

JNIEXPORT jint JNICALL Java_com_zxzx74147_mediacore_components_audio_mixer_AudioNdkInterface_mix
        (JNIEnv *, jclass, jbyteArray, jint, jint, jbyteArray, jint);

#ifdef __cplusplus
}
#endif

JNIEXPORT jint JNICALL Java_com_zxzx74147_mediacore_components_audio_mixer_AudioNdkInterface_pcm_1convert
        (JNIEnv * env, jclass m_class, jbyteArray pbyteInBuffer, jint dwInLength, jint dwInSampleRate, jint dwChannal,
         jbyteArray pbyteOutBuffer, jint dwOutSampleRate){
    jboolean isCopy;
    jbyte* input = env->GetByteArrayElements(pbyteInBuffer,&isCopy);
    jbyte* output = env->GetByteArrayElements(pbyteOutBuffer,&isCopy);
    unsigned int dstLen = env->GetArrayLength(pbyteOutBuffer);
    PcmProcess process;
    process.pcm_convert((const unsigned char *) input, dwInLength, dwInSampleRate, dwChannal,
                        (unsigned char *) output, dstLen, dwOutSampleRate);

    env->ReleaseByteArrayElements( pbyteInBuffer, input, 0);
    env->ReleaseByteArrayElements( pbyteOutBuffer, output, 0);

    return dstLen;

}

JNIEXPORT jint JNICALL Java_com_zxzx74147_mediacore_components_audio_mixer_AudioNdkInterface_mix
        (JNIEnv * env, jclass m_class, jbyteArray pbyteDest, jint dwDestLen, jint dwDestCap, jbyteArray pbyteSrc, jint dwSrcLen){
    jboolean isCopy;
    jbyte* dst = env->GetByteArrayElements(pbyteDest,&isCopy);
    jbyte* src = env->GetByteArrayElements(pbyteSrc,&isCopy);
    unsigned int dst_len = dwDestLen;
    unsigned int src_len = dwSrcLen;

    PcmProcess process;
    int mix_len = process.mix((unsigned char *) dst, dst_len, dwDestCap, (const unsigned char *) src, src_len);

    env->ReleaseByteArrayElements( pbyteDest, dst, 0);
    env->ReleaseByteArrayElements( pbyteSrc, src, 0);
    return mix_len;
}
#endif
